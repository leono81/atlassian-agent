#!/usr/bin/env python3
"""
Script de diagn√≥stico para el agente Atlassian
"""

import sys
sys.path.append('.')

def test_imports():
    """Prueba las importaciones b√°sicas"""
    print("üîç Probando importaciones...")
    
    try:
        from config import settings
        print("‚úÖ Settings importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando settings: {e}")
        return False
    
    try:
        import logfire
        print("‚úÖ Logfire importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando logfire: {e}")
        return False
    
    try:
        from config.logging_context import logger, log_user_action
        print("‚úÖ Logging context importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando logging_context: {e}")
        return False
        
    try:
        from ui.agent_wrapper import simple_agent
        print("‚úÖ Agent wrapper importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando agent_wrapper: {e}")
        return False
    
    return True

def test_basic_functions():
    """Prueba las funciones b√°sicas"""
    print("\nüîç Probando funciones b√°sicas...")
    
    try:
        from config.logging_context import logger
        logger.info("Test b√°sico de logging")
        print("‚úÖ Logger funciona correctamente")
    except Exception as e:
        print(f"‚ùå Error en logger: {e}")
        return False
    
    try:
        import uuid
        operation_id = str(uuid.uuid4())[:8]
        print(f"‚úÖ UUID generado: {operation_id}")
    except Exception as e:
        print(f"‚ùå Error generando UUID: {e}")
        return False
    
    return True

def test_agent_basic():
    """Prueba b√°sica del agente"""
    print("\nüîç Probando agente b√°sico...")
    
    try:
        from ui.agent_wrapper import simple_agent
        print("‚úÖ Agente importado correctamente")
        
        # Test muy b√°sico sin llamada real
        print("‚úÖ Agente disponible para pruebas")
        return True
    except Exception as e:
        print(f"‚ùå Error con el agente: {e}")
        return False

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üöÄ DIAGN√ìSTICO DEL AGENTE ATLASSIAN")
    print("=" * 50)
    
    # Test 1: Importaciones
    if not test_imports():
        print("\n‚ùå FALLO: Problema con importaciones")
        return 1
    
    # Test 2: Funciones b√°sicas
    if not test_basic_functions():
        print("\n‚ùå FALLO: Problema con funciones b√°sicas")
        return 1
    
    # Test 3: Agente b√°sico
    if not test_agent_basic():
        print("\n‚ùå FALLO: Problema con el agente")
        return 1
    
    print("\n" + "=" * 50)
    print("‚úÖ DIAGN√ìSTICO COMPLETO: Todo funciona correctamente")
    print("El problema puede estar en Streamlit o en la configuraci√≥n espec√≠fica")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 