#!/usr/bin/env python3
"""
Script de verificaci√≥n para la configuraci√≥n de autenticaci√≥n.
Ejecuta este script para verificar que todo est√© configurado correctamente.
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """Verifica si un archivo existe."""
    if Path(file_path).exists():
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - NO ENCONTRADO")
        return False

def check_secrets_file():
    """Verifica el archivo de secrets."""
    secrets_path = ".streamlit/secrets.toml"
    if not check_file_exists(secrets_path, "Archivo de secrets"):
        return False
    
    try:
        with open(secrets_path, 'r') as f:
            content = f.read()
        
        required_keys = [
            "redirect_uri",
            "cookie_secret", 
            "client_id",
            "client_secret",
            "server_metadata_url"
        ]
        
        missing_keys = []
        for key in required_keys:
            if key not in content:
                missing_keys.append(key)
        
        if missing_keys:
            print(f"‚ùå Faltan claves en secrets.toml: {', '.join(missing_keys)}")
            return False
        
        # Verificar que no tengan valores de template
        template_values = [
            "REEMPLAZA_CON_UN_SECRET_ALEATORIO",
            "TU_GOOGLE_CLIENT_ID",
            "TU_GOOGLE_CLIENT_SECRET"
        ]
        
        for template_val in template_values:
            if template_val in content:
                print(f"‚ùå Encontrado valor de template en secrets.toml: {template_val}")
                print("   Debes reemplazar este valor con tu configuraci√≥n real")
                return False
        
        print("‚úÖ Archivo secrets.toml configurado correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error leyendo secrets.toml: {e}")
        return False

def check_gitignore():
    """Verifica que .gitignore proteja los secrets."""
    gitignore_path = ".gitignore"
    if not check_file_exists(gitignore_path, "Archivo .gitignore"):
        return False
    
    try:
        with open(gitignore_path, 'r') as f:
            content = f.read()
        
        if ".streamlit/secrets.toml" in content:
            print("‚úÖ .gitignore protege secrets.toml")
            return True
        else:
            print("‚ùå .gitignore NO protege secrets.toml")
            print("   Agrega esta l√≠nea: .streamlit/secrets.toml")
            return False
            
    except Exception as e:
        print(f"‚ùå Error leyendo .gitignore: {e}")
        return False

def check_environment():
    """Verifica variables de entorno necesarias."""
    env_vars = ["MEM0_API_KEY", "OPENAI_API_KEY"]
    found_vars = []
    
    for var in env_vars:
        if os.getenv(var):
            found_vars.append(var)
            print(f"‚úÖ Variable de entorno: {var}")
        else:
            print(f"‚ö†Ô∏è  Variable de entorno: {var} - NO ENCONTRADA")
    
    if found_vars:
        print(f"‚úÖ Al menos una variable de entorno configurada: {', '.join(found_vars)}")
        return True
    else:
        print("‚ùå No se encontraron variables de entorno necesarias")
        return False

def check_streamlit_version():
    """Verifica la versi√≥n de Streamlit."""
    try:
        import streamlit as st
        version = st.__version__
        
        # Verificar que tenga soporte para autenticaci√≥n nativa
        if hasattr(st, 'login') and hasattr(st, 'logout'):
            print(f"‚úÖ Streamlit {version} con soporte de autenticaci√≥n nativa")
            return True
        else:
            print(f"‚ùå Streamlit {version} NO tiene soporte de autenticaci√≥n nativa")
            print("   Actualiza Streamlit: pip install --upgrade streamlit")
            return False
            
    except ImportError:
        print("‚ùå Streamlit no est√° instalado")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n."""
    print("üîç Verificando configuraci√≥n de autenticaci√≥n...\n")
    
    checks = [
        ("Directorio .streamlit", lambda: check_file_exists(".streamlit", "Directorio de configuraci√≥n")),
        ("Template de secrets", lambda: check_file_exists(".streamlit/secrets.toml.template", "Template de secrets")),
        ("Archivo de secrets", check_secrets_file),
        ("Protecci√≥n .gitignore", check_gitignore),
        ("Variables de entorno", check_environment),
        ("Versi√≥n de Streamlit", check_streamlit_version),
        ("Archivos de documentaci√≥n", lambda: all([
            check_file_exists("SETUP_OAUTH.md", "Gu√≠a OAuth2"),
            check_file_exists("AUTHENTICATION_GUIDE.md", "Gu√≠a de autenticaci√≥n"),
            check_file_exists("generate_cookie_secret.py", "Generador de cookie secret")
        ]))
    ]
    
    passed = 0
    total = len(checks)
    
    for name, check_func in checks:
        print(f"\n--- {name} ---")
        if check_func():
            passed += 1
        else:
            print(f"üí° Consulta AUTHENTICATION_GUIDE.md para solucionar este problema")
    
    print(f"\n{'='*50}")
    print(f"üìä RESUMEN: {passed}/{total} verificaciones pasaron")
    
    if passed == total:
        print("üéâ ¬°Todo configurado correctamente!")
        print("üöÄ Puedes ejecutar: streamlit run ui/app.py")
    else:
        print("‚ö†Ô∏è  Hay problemas de configuraci√≥n que debes resolver")
        print("üìñ Consulta AUTHENTICATION_GUIDE.md para m√°s detalles")
        sys.exit(1)

if __name__ == "__main__":
    main() 